generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String    @id @default(uuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  expires      DateTime
  sessionToken String
  accessToken  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Verificationrequest {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  account   Account[]
  session   Session[]
  Sheet     Sheet[]   @relation("Creator")
  favorites Sheet[]

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  @@index([profileId])
}

model Sheet {
  id               String   @id @default(uuid())
  shortId          String?
  title            String
  shortDescription String?
  description      String?  @db.Text
  ref              String?
  type             String?
  categoryType     String?
  criticity        String?
  businessApp      String?
  published        Boolean? @default(false)
  company          String?
  obsolete         Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User                        @relation(fields: [userId], references: [id], name: "Creator")
  userId            String
  category          ServiceNowCategories?       @relation(fields: [categoryId], references: [id])
  categoryId        String?
  subcategory       ServiceNowSubCategories?    @relation(fields: [subcategoryId], references: [id])
  subcategoryId     String?
  categorytype      ServiceNowCategoryTypes?    @relation(fields: [categorytypeId], references: [id])
  categorytypeId    String?
  assignmentgroup   ServiceNowAssignmentGroups? @relation(fields: [assignmentgroupId], references: [id])
  assignmentgroupId String?

  favoritesUsers User[]

  @@index([userId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([categorytypeId])
  @@index([assignmentgroupId])
}

model Profile {
  id          String @id @default(uuid())
  name        String @unique
  label       String
  permissions Json   @db.Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
  roles Role[]
}

model Role {
  id    String @id @default(uuid())
  name  String
  label String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String
  Profiles      Profile[]

  @@index([applicationId])
}

model Application {
  id    String @id @default(uuid())
  name  String @unique
  label String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]
}

model ServiceNowCategories {
  id    String @id @default(uuid())
  name  String @unique
  label String
  icon  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sheets        Sheet[]
  subcategories ServiceNowSubCategories[]
}

model ServiceNowSubCategories {
  id    String @id @default(uuid())
  name  String @unique
  label String
  icon  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   ServiceNowCategories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  sheets Sheet[]

  @@index([categoryId])
}

model ServiceNowCategoryTypes {
  id    String @id @default(uuid())
  name  String @unique
  label String
  icon  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sheets Sheet[]
}

model ServiceNowAssignmentGroups {
  id    String @id @default(uuid())
  name  String @unique
  label String
  group String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sheets Sheet[]
}
